// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "src/internal/cart/model"

	mock "github.com/stretchr/testify/mock"
)

// ICartRepository is an autogenerated mock type for the ICartRepository type
type ICartRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, cart
func (_m *ICartRepository) Create(ctx context.Context, cart *model.Cart) error {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByRacketID provides a mock function with given fields: ctx, id
func (_m *ICartRepository) DeleteByRacketID(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByRacketID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCartByUserID provides a mock function with given fields: ctx, userID
func (_m *ICartRepository) GetCartByUserID(ctx context.Context, userID string) (*model.Cart, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCartByUserID")
	}

	var r0 *model.Cart
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Cart, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Cart); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Cart)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, cart
func (_m *ICartRepository) Update(ctx context.Context, cart *model.Cart) error {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewICartRepository creates a new instance of ICartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICartRepository {
	mock := &ICartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
