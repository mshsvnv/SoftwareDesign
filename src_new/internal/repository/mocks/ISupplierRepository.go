// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	model "src_new/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// ISupplierRepository is an autogenerated mock type for the ISupplierRepository type
type ISupplierRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, supplier
func (_m *ISupplierRepository) Create(ctx context.Context, supplier *model.Supplier) error {
	ret := _m.Called(ctx, supplier)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Supplier) error); ok {
		r0 = rf(ctx, supplier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSupplierByID provides a mock function with given fields: ctx, id
func (_m *ISupplierRepository) GetSupplierByID(ctx context.Context, id int) (*model.Supplier, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetSupplierByID")
	}

	var r0 *model.Supplier
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.Supplier, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.Supplier); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Supplier)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, email
func (_m *ISupplierRepository) Remove(ctx context.Context, email string) error {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, supplier
func (_m *ISupplierRepository) Update(ctx context.Context, supplier *model.Supplier) error {
	ret := _m.Called(ctx, supplier)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Supplier) error); ok {
		r0 = rf(ctx, supplier)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISupplierRepository creates a new instance of ISupplierRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISupplierRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISupplierRepository {
	mock := &ISupplierRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
