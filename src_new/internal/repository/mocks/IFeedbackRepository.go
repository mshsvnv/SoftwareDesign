// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "src_new/internal/dto"

	mock "github.com/stretchr/testify/mock"

	model "src_new/internal/model"
)

// IFeedbackRepository is an autogenerated mock type for the IFeedbackRepository type
type IFeedbackRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, feedback
func (_m *IFeedbackRepository) Create(ctx context.Context, feedback *model.Feedback) error {
	ret := _m.Called(ctx, feedback)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Feedback) error); ok {
		r0 = rf(ctx, feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFeedback provides a mock function with given fields: ctx, req
func (_m *IFeedbackRepository) GetFeedback(ctx context.Context, req *dto.GetFeedbackReq) (*model.Feedback, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedback")
	}

	var r0 *model.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetFeedbackReq) (*model.Feedback, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.GetFeedbackReq) *model.Feedback); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.GetFeedbackReq) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeedbacksByRacketID provides a mock function with given fields: ctx, id
func (_m *IFeedbackRepository) GetFeedbacksByRacketID(ctx context.Context, id int) ([]*model.Feedback, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedbacksByRacketID")
	}

	var r0 []*model.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.Feedback, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.Feedback); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeedbacksByUserID provides a mock function with given fields: ctx, id
func (_m *IFeedbackRepository) GetFeedbacksByUserID(ctx context.Context, id int) ([]*model.Feedback, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedbacksByUserID")
	}

	var r0 []*model.Feedback
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]*model.Feedback, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []*model.Feedback); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Feedback)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Remove provides a mock function with given fields: ctx, req
func (_m *IFeedbackRepository) Remove(ctx context.Context, req *dto.RemoveFeedbackReq) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.RemoveFeedbackReq) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, feedback
func (_m *IFeedbackRepository) Update(ctx context.Context, feedback *model.Feedback) error {
	ret := _m.Called(ctx, feedback)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Feedback) error); ok {
		r0 = rf(ctx, feedback)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIFeedbackRepository creates a new instance of IFeedbackRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFeedbackRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFeedbackRepository {
	mock := &IFeedbackRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
